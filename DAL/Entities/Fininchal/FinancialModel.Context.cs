//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.Entities.Fininchal
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FinancialDBEntities : DbContext
    {
        public FinancialDBEntities()
            : base("name=FinancialDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<InvoicesTBL> InvoicesTBLs { get; set; }
        public virtual DbSet<InvoiceType> InvoiceTypes { get; set; }
    
        public virtual ObjectResult<InvoicesTBL> GetAllInvoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoicesTBL>("GetAllInvoices");
        }
    
        public virtual ObjectResult<InvoicesTBL> GetAllInvoices(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoicesTBL>("GetAllInvoices", mergeOption);
        }
    
        public virtual ObjectResult<InvoiceType> GetAllInvoiceTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoiceType>("GetAllInvoiceTypes");
        }
    
        public virtual ObjectResult<InvoiceType> GetAllInvoiceTypes(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoiceType>("GetAllInvoiceTypes", mergeOption);
        }
    
        public virtual ObjectResult<InvoicesTBL> SelectLikeInvoice(string invoicelID, string arName, string enName)
        {
            var invoicelIDParameter = invoicelID != null ?
                new ObjectParameter("InvoicelID", invoicelID) :
                new ObjectParameter("InvoicelID", typeof(string));
    
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoicesTBL>("SelectLikeInvoice", invoicelIDParameter, arNameParameter, enNameParameter);
        }
    
        public virtual ObjectResult<InvoicesTBL> SelectLikeInvoice(string invoicelID, string arName, string enName, MergeOption mergeOption)
        {
            var invoicelIDParameter = invoicelID != null ?
                new ObjectParameter("InvoicelID", invoicelID) :
                new ObjectParameter("InvoicelID", typeof(string));
    
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoicesTBL>("SelectLikeInvoice", mergeOption, invoicelIDParameter, arNameParameter, enNameParameter);
        }
    
        public virtual ObjectResult<InvoicesTBL> SelectParamInvoice(Nullable<int> recordID, string invoicelID, string arName, string enName, Nullable<int> invoiceType, Nullable<bool> deliveryStatus, Nullable<decimal> invoiceAmount, Nullable<bool> paidStatus, Nullable<decimal> paidAmount, Nullable<int> projectID, Nullable<int> empID)
        {
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var invoicelIDParameter = invoicelID != null ?
                new ObjectParameter("InvoicelID", invoicelID) :
                new ObjectParameter("InvoicelID", typeof(string));
    
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            var invoiceTypeParameter = invoiceType.HasValue ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(int));
    
            var deliveryStatusParameter = deliveryStatus.HasValue ?
                new ObjectParameter("DeliveryStatus", deliveryStatus) :
                new ObjectParameter("DeliveryStatus", typeof(bool));
    
            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new ObjectParameter("InvoiceAmount", invoiceAmount) :
                new ObjectParameter("InvoiceAmount", typeof(decimal));
    
            var paidStatusParameter = paidStatus.HasValue ?
                new ObjectParameter("PaidStatus", paidStatus) :
                new ObjectParameter("PaidStatus", typeof(bool));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoicesTBL>("SelectParamInvoice", recordIDParameter, invoicelIDParameter, arNameParameter, enNameParameter, invoiceTypeParameter, deliveryStatusParameter, invoiceAmountParameter, paidStatusParameter, paidAmountParameter, projectIDParameter, empIDParameter);
        }
    
        public virtual ObjectResult<InvoicesTBL> SelectParamInvoice(Nullable<int> recordID, string invoicelID, string arName, string enName, Nullable<int> invoiceType, Nullable<bool> deliveryStatus, Nullable<decimal> invoiceAmount, Nullable<bool> paidStatus, Nullable<decimal> paidAmount, Nullable<int> projectID, Nullable<int> empID, MergeOption mergeOption)
        {
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var invoicelIDParameter = invoicelID != null ?
                new ObjectParameter("InvoicelID", invoicelID) :
                new ObjectParameter("InvoicelID", typeof(string));
    
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            var invoiceTypeParameter = invoiceType.HasValue ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(int));
    
            var deliveryStatusParameter = deliveryStatus.HasValue ?
                new ObjectParameter("DeliveryStatus", deliveryStatus) :
                new ObjectParameter("DeliveryStatus", typeof(bool));
    
            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new ObjectParameter("InvoiceAmount", invoiceAmount) :
                new ObjectParameter("InvoiceAmount", typeof(decimal));
    
            var paidStatusParameter = paidStatus.HasValue ?
                new ObjectParameter("PaidStatus", paidStatus) :
                new ObjectParameter("PaidStatus", typeof(bool));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoicesTBL>("SelectParamInvoice", mergeOption, recordIDParameter, invoicelIDParameter, arNameParameter, enNameParameter, invoiceTypeParameter, deliveryStatusParameter, invoiceAmountParameter, paidStatusParameter, paidAmountParameter, projectIDParameter, empIDParameter);
        }
    }
}
