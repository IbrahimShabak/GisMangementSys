//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.Entities.Projects
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProjectsEntities : DbContext
    {
        public ProjectsEntities()
            : base("name=ProjectsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ContractsChange> ContractsChanges { get; set; }
        public virtual DbSet<DeliverableStage> DeliverableStages { get; set; }
        public virtual DbSet<OegType> OegTypes { get; set; }
        public virtual DbSet<OrganizationBasic> OrganizationBasics { get; set; }
        public virtual DbSet<OrganizationsProject> OrganizationsProjects { get; set; }
        public virtual DbSet<PepoleTBL> PepoleTBLs { get; set; }
        public virtual DbSet<PositionInProject> PositionInProjects { get; set; }
        public virtual DbSet<ProjectEmployee> ProjectEmployees { get; set; }
        public virtual DbSet<StageProject> StageProjects { get; set; }
        public virtual DbSet<ProjectTBL> ProjectTBLs { get; set; }
    
        public virtual ObjectResult<ContractsChange> SelectAllContractsChange()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContractsChange>("SelectAllContractsChange");
        }
    
        public virtual ObjectResult<ContractsChange> SelectAllContractsChange(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContractsChange>("SelectAllContractsChange", mergeOption);
        }
    
        public virtual ObjectResult<DeliverableStage> SelectAllDeliverableStage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliverableStage>("SelectAllDeliverableStage");
        }
    
        public virtual ObjectResult<DeliverableStage> SelectAllDeliverableStage(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliverableStage>("SelectAllDeliverableStage", mergeOption);
        }
    
        public virtual ObjectResult<OegType> SelectAllOegType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OegType>("SelectAllOegType");
        }
    
        public virtual ObjectResult<OegType> SelectAllOegType(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OegType>("SelectAllOegType", mergeOption);
        }
    
        public virtual ObjectResult<OrganizationBasic> SelectAllOrganizationBasics()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrganizationBasic>("SelectAllOrganizationBasics");
        }
    
        public virtual ObjectResult<OrganizationBasic> SelectAllOrganizationBasics(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrganizationBasic>("SelectAllOrganizationBasics", mergeOption);
        }
    
        public virtual ObjectResult<OrganizationsProject> SelectAllOrganizationProject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrganizationsProject>("SelectAllOrganizationProject");
        }
    
        public virtual ObjectResult<OrganizationsProject> SelectAllOrganizationProject(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrganizationsProject>("SelectAllOrganizationProject", mergeOption);
        }
    
        public virtual ObjectResult<PepoleTBL> SelectAllPepoleTBL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PepoleTBL>("SelectAllPepoleTBL");
        }
    
        public virtual ObjectResult<PepoleTBL> SelectAllPepoleTBL(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PepoleTBL>("SelectAllPepoleTBL", mergeOption);
        }
    
        public virtual ObjectResult<ProjectEmployee> SelectAllProjectEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectEmployee>("SelectAllProjectEmployees");
        }
    
        public virtual ObjectResult<ProjectEmployee> SelectAllProjectEmployees(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectEmployee>("SelectAllProjectEmployees", mergeOption);
        }
    
        public virtual ObjectResult<ProjectTBL> SelectAllProjectTBL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectTBL>("SelectAllProjectTBL");
        }
    
        public virtual ObjectResult<ProjectTBL> SelectAllProjectTBL(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectTBL>("SelectAllProjectTBL", mergeOption);
        }
    
        public virtual ObjectResult<StageProject> SelectAllStageProject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StageProject>("SelectAllStageProject");
        }
    
        public virtual ObjectResult<StageProject> SelectAllStageProject(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StageProject>("SelectAllStageProject", mergeOption);
        }
    
        public virtual ObjectResult<ContractsChange> SelectlikeContractChange(string changedDescription)
        {
            var changedDescriptionParameter = changedDescription != null ?
                new ObjectParameter("ChangedDescription", changedDescription) :
                new ObjectParameter("ChangedDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContractsChange>("SelectlikeContractChange", changedDescriptionParameter);
        }
    
        public virtual ObjectResult<ContractsChange> SelectlikeContractChange(string changedDescription, MergeOption mergeOption)
        {
            var changedDescriptionParameter = changedDescription != null ?
                new ObjectParameter("ChangedDescription", changedDescription) :
                new ObjectParameter("ChangedDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContractsChange>("SelectlikeContractChange", mergeOption, changedDescriptionParameter);
        }
    
        public virtual ObjectResult<DeliverableStage> SelectlikeDeliverableStage(string deliverableArName, string deliverableEnName)
        {
            var deliverableArNameParameter = deliverableArName != null ?
                new ObjectParameter("DeliverableArName", deliverableArName) :
                new ObjectParameter("DeliverableArName", typeof(string));
    
            var deliverableEnNameParameter = deliverableEnName != null ?
                new ObjectParameter("DeliverableEnName", deliverableEnName) :
                new ObjectParameter("DeliverableEnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliverableStage>("SelectlikeDeliverableStage", deliverableArNameParameter, deliverableEnNameParameter);
        }
    
        public virtual ObjectResult<DeliverableStage> SelectlikeDeliverableStage(string deliverableArName, string deliverableEnName, MergeOption mergeOption)
        {
            var deliverableArNameParameter = deliverableArName != null ?
                new ObjectParameter("DeliverableArName", deliverableArName) :
                new ObjectParameter("DeliverableArName", typeof(string));
    
            var deliverableEnNameParameter = deliverableEnName != null ?
                new ObjectParameter("DeliverableEnName", deliverableEnName) :
                new ObjectParameter("DeliverableEnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliverableStage>("SelectlikeDeliverableStage", mergeOption, deliverableArNameParameter, deliverableEnNameParameter);
        }
    
        public virtual ObjectResult<PepoleTBL> SelectlikePepoleTBL(string arName, string enName, string mobilePhone, string emailAdress)
        {
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var emailAdressParameter = emailAdress != null ?
                new ObjectParameter("EmailAdress", emailAdress) :
                new ObjectParameter("EmailAdress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PepoleTBL>("SelectlikePepoleTBL", arNameParameter, enNameParameter, mobilePhoneParameter, emailAdressParameter);
        }
    
        public virtual ObjectResult<PepoleTBL> SelectlikePepoleTBL(string arName, string enName, string mobilePhone, string emailAdress, MergeOption mergeOption)
        {
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var emailAdressParameter = emailAdress != null ?
                new ObjectParameter("EmailAdress", emailAdress) :
                new ObjectParameter("EmailAdress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PepoleTBL>("SelectlikePepoleTBL", mergeOption, arNameParameter, enNameParameter, mobilePhoneParameter, emailAdressParameter);
        }
    
        public virtual ObjectResult<ProjectEmployee> SelectlikeProjectEmployees(Nullable<int> projectID, Nullable<int> empID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectEmployee>("SelectlikeProjectEmployees", projectIDParameter, empIDParameter);
        }
    
        public virtual ObjectResult<ProjectEmployee> SelectlikeProjectEmployees(Nullable<int> projectID, Nullable<int> empID, MergeOption mergeOption)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectEmployee>("SelectlikeProjectEmployees", mergeOption, projectIDParameter, empIDParameter);
        }
    
        public virtual ObjectResult<ProjectTBL> SelectLikeProjectTBL(string projectNumber, string arName, string enName)
        {
            var projectNumberParameter = projectNumber != null ?
                new ObjectParameter("ProjectNumber", projectNumber) :
                new ObjectParameter("ProjectNumber", typeof(string));
    
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectTBL>("SelectLikeProjectTBL", projectNumberParameter, arNameParameter, enNameParameter);
        }
    
        public virtual ObjectResult<ProjectTBL> SelectLikeProjectTBL(string projectNumber, string arName, string enName, MergeOption mergeOption)
        {
            var projectNumberParameter = projectNumber != null ?
                new ObjectParameter("ProjectNumber", projectNumber) :
                new ObjectParameter("ProjectNumber", typeof(string));
    
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectTBL>("SelectLikeProjectTBL", mergeOption, projectNumberParameter, arNameParameter, enNameParameter);
        }
    
        public virtual ObjectResult<StageProject> SelectLikeStageProject(string stageArName, string stageEnName)
        {
            var stageArNameParameter = stageArName != null ?
                new ObjectParameter("StageArName", stageArName) :
                new ObjectParameter("StageArName", typeof(string));
    
            var stageEnNameParameter = stageEnName != null ?
                new ObjectParameter("StageEnName", stageEnName) :
                new ObjectParameter("StageEnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StageProject>("SelectLikeStageProject", stageArNameParameter, stageEnNameParameter);
        }
    
        public virtual ObjectResult<StageProject> SelectLikeStageProject(string stageArName, string stageEnName, MergeOption mergeOption)
        {
            var stageArNameParameter = stageArName != null ?
                new ObjectParameter("StageArName", stageArName) :
                new ObjectParameter("StageArName", typeof(string));
    
            var stageEnNameParameter = stageEnName != null ?
                new ObjectParameter("StageEnName", stageEnName) :
                new ObjectParameter("StageEnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StageProject>("SelectLikeStageProject", mergeOption, stageArNameParameter, stageEnNameParameter);
        }
    
        public virtual ObjectResult<ContractsChange> SelectParamContractChange(Nullable<int> iD, Nullable<int> projectID, string changedDescription, Nullable<decimal> originalAmount, Nullable<decimal> newAmount)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var changedDescriptionParameter = changedDescription != null ?
                new ObjectParameter("ChangedDescription", changedDescription) :
                new ObjectParameter("ChangedDescription", typeof(string));
    
            var originalAmountParameter = originalAmount.HasValue ?
                new ObjectParameter("OriginalAmount", originalAmount) :
                new ObjectParameter("OriginalAmount", typeof(decimal));
    
            var newAmountParameter = newAmount.HasValue ?
                new ObjectParameter("NewAmount", newAmount) :
                new ObjectParameter("NewAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContractsChange>("SelectParamContractChange", iDParameter, projectIDParameter, changedDescriptionParameter, originalAmountParameter, newAmountParameter);
        }
    
        public virtual ObjectResult<ContractsChange> SelectParamContractChange(Nullable<int> iD, Nullable<int> projectID, string changedDescription, Nullable<decimal> originalAmount, Nullable<decimal> newAmount, MergeOption mergeOption)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var changedDescriptionParameter = changedDescription != null ?
                new ObjectParameter("ChangedDescription", changedDescription) :
                new ObjectParameter("ChangedDescription", typeof(string));
    
            var originalAmountParameter = originalAmount.HasValue ?
                new ObjectParameter("OriginalAmount", originalAmount) :
                new ObjectParameter("OriginalAmount", typeof(decimal));
    
            var newAmountParameter = newAmount.HasValue ?
                new ObjectParameter("NewAmount", newAmount) :
                new ObjectParameter("NewAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContractsChange>("SelectParamContractChange", mergeOption, iDParameter, projectIDParameter, changedDescriptionParameter, originalAmountParameter, newAmountParameter);
        }
    
        public virtual ObjectResult<DeliverableStage> SelectParamDeliverableStage(Nullable<int> deliverableID, Nullable<int> stageID, string deliverableArName, string deliverableEnName)
        {
            var deliverableIDParameter = deliverableID.HasValue ?
                new ObjectParameter("DeliverableID", deliverableID) :
                new ObjectParameter("DeliverableID", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var deliverableArNameParameter = deliverableArName != null ?
                new ObjectParameter("DeliverableArName", deliverableArName) :
                new ObjectParameter("DeliverableArName", typeof(string));
    
            var deliverableEnNameParameter = deliverableEnName != null ?
                new ObjectParameter("DeliverableEnName", deliverableEnName) :
                new ObjectParameter("DeliverableEnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliverableStage>("SelectParamDeliverableStage", deliverableIDParameter, stageIDParameter, deliverableArNameParameter, deliverableEnNameParameter);
        }
    
        public virtual ObjectResult<DeliverableStage> SelectParamDeliverableStage(Nullable<int> deliverableID, Nullable<int> stageID, string deliverableArName, string deliverableEnName, MergeOption mergeOption)
        {
            var deliverableIDParameter = deliverableID.HasValue ?
                new ObjectParameter("DeliverableID", deliverableID) :
                new ObjectParameter("DeliverableID", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var deliverableArNameParameter = deliverableArName != null ?
                new ObjectParameter("DeliverableArName", deliverableArName) :
                new ObjectParameter("DeliverableArName", typeof(string));
    
            var deliverableEnNameParameter = deliverableEnName != null ?
                new ObjectParameter("DeliverableEnName", deliverableEnName) :
                new ObjectParameter("DeliverableEnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliverableStage>("SelectParamDeliverableStage", mergeOption, deliverableIDParameter, stageIDParameter, deliverableArNameParameter, deliverableEnNameParameter);
        }
    
        public virtual ObjectResult<OrganizationBasic> SelectParamOrganizationBasics(Nullable<int> orgID, string orgArName, string orgEnName, string landLineNumber)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            var orgArNameParameter = orgArName != null ?
                new ObjectParameter("OrgArName", orgArName) :
                new ObjectParameter("OrgArName", typeof(string));
    
            var orgEnNameParameter = orgEnName != null ?
                new ObjectParameter("OrgEnName", orgEnName) :
                new ObjectParameter("OrgEnName", typeof(string));
    
            var landLineNumberParameter = landLineNumber != null ?
                new ObjectParameter("LandLineNumber", landLineNumber) :
                new ObjectParameter("LandLineNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrganizationBasic>("SelectParamOrganizationBasics", orgIDParameter, orgArNameParameter, orgEnNameParameter, landLineNumberParameter);
        }
    
        public virtual ObjectResult<OrganizationBasic> SelectParamOrganizationBasics(Nullable<int> orgID, string orgArName, string orgEnName, string landLineNumber, MergeOption mergeOption)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            var orgArNameParameter = orgArName != null ?
                new ObjectParameter("OrgArName", orgArName) :
                new ObjectParameter("OrgArName", typeof(string));
    
            var orgEnNameParameter = orgEnName != null ?
                new ObjectParameter("OrgEnName", orgEnName) :
                new ObjectParameter("OrgEnName", typeof(string));
    
            var landLineNumberParameter = landLineNumber != null ?
                new ObjectParameter("LandLineNumber", landLineNumber) :
                new ObjectParameter("LandLineNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrganizationBasic>("SelectParamOrganizationBasics", mergeOption, orgIDParameter, orgArNameParameter, orgEnNameParameter, landLineNumberParameter);
        }
    
        public virtual ObjectResult<OrganizationsProject> SelectParamOrganizationProject(Nullable<int> serNum, Nullable<int> peopleID, Nullable<int> projectID, Nullable<int> orgTypeID)
        {
            var serNumParameter = serNum.HasValue ?
                new ObjectParameter("SerNum", serNum) :
                new ObjectParameter("SerNum", typeof(int));
    
            var peopleIDParameter = peopleID.HasValue ?
                new ObjectParameter("PeopleID", peopleID) :
                new ObjectParameter("PeopleID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var orgTypeIDParameter = orgTypeID.HasValue ?
                new ObjectParameter("OrgTypeID", orgTypeID) :
                new ObjectParameter("OrgTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrganizationsProject>("SelectParamOrganizationProject", serNumParameter, peopleIDParameter, projectIDParameter, orgTypeIDParameter);
        }
    
        public virtual ObjectResult<OrganizationsProject> SelectParamOrganizationProject(Nullable<int> serNum, Nullable<int> peopleID, Nullable<int> projectID, Nullable<int> orgTypeID, MergeOption mergeOption)
        {
            var serNumParameter = serNum.HasValue ?
                new ObjectParameter("SerNum", serNum) :
                new ObjectParameter("SerNum", typeof(int));
    
            var peopleIDParameter = peopleID.HasValue ?
                new ObjectParameter("PeopleID", peopleID) :
                new ObjectParameter("PeopleID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var orgTypeIDParameter = orgTypeID.HasValue ?
                new ObjectParameter("OrgTypeID", orgTypeID) :
                new ObjectParameter("OrgTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrganizationsProject>("SelectParamOrganizationProject", mergeOption, serNumParameter, peopleIDParameter, projectIDParameter, orgTypeIDParameter);
        }
    
        public virtual ObjectResult<PepoleTBL> SelectParamPepoleTBL(Nullable<int> peopleID, string arName, string enName, string mobilePhone, string landLineExt, string emailAdress, Nullable<int> orgID)
        {
            var peopleIDParameter = peopleID.HasValue ?
                new ObjectParameter("PeopleID", peopleID) :
                new ObjectParameter("PeopleID", typeof(int));
    
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var landLineExtParameter = landLineExt != null ?
                new ObjectParameter("LandLineExt", landLineExt) :
                new ObjectParameter("LandLineExt", typeof(string));
    
            var emailAdressParameter = emailAdress != null ?
                new ObjectParameter("EmailAdress", emailAdress) :
                new ObjectParameter("EmailAdress", typeof(string));
    
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PepoleTBL>("SelectParamPepoleTBL", peopleIDParameter, arNameParameter, enNameParameter, mobilePhoneParameter, landLineExtParameter, emailAdressParameter, orgIDParameter);
        }
    
        public virtual ObjectResult<PepoleTBL> SelectParamPepoleTBL(Nullable<int> peopleID, string arName, string enName, string mobilePhone, string landLineExt, string emailAdress, Nullable<int> orgID, MergeOption mergeOption)
        {
            var peopleIDParameter = peopleID.HasValue ?
                new ObjectParameter("PeopleID", peopleID) :
                new ObjectParameter("PeopleID", typeof(int));
    
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var landLineExtParameter = landLineExt != null ?
                new ObjectParameter("LandLineExt", landLineExt) :
                new ObjectParameter("LandLineExt", typeof(string));
    
            var emailAdressParameter = emailAdress != null ?
                new ObjectParameter("EmailAdress", emailAdress) :
                new ObjectParameter("EmailAdress", typeof(string));
    
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PepoleTBL>("SelectParamPepoleTBL", mergeOption, peopleIDParameter, arNameParameter, enNameParameter, mobilePhoneParameter, landLineExtParameter, emailAdressParameter, orgIDParameter);
        }
    
        public virtual ObjectResult<ProjectEmployee> SelectParamProjectEmployees(Nullable<int> iD, Nullable<int> projectID, Nullable<int> empID, Nullable<int> positionInProject)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var positionInProjectParameter = positionInProject.HasValue ?
                new ObjectParameter("PositionInProject", positionInProject) :
                new ObjectParameter("PositionInProject", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectEmployee>("SelectParamProjectEmployees", iDParameter, projectIDParameter, empIDParameter, positionInProjectParameter);
        }
    
        public virtual ObjectResult<ProjectEmployee> SelectParamProjectEmployees(Nullable<int> iD, Nullable<int> projectID, Nullable<int> empID, Nullable<int> positionInProject, MergeOption mergeOption)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var positionInProjectParameter = positionInProject.HasValue ?
                new ObjectParameter("PositionInProject", positionInProject) :
                new ObjectParameter("PositionInProject", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectEmployee>("SelectParamProjectEmployees", mergeOption, iDParameter, projectIDParameter, empIDParameter, positionInProjectParameter);
        }
    
        public virtual ObjectResult<ProjectTBL> SelectParamProjectTBL(Nullable<int> projectID, string projectNumber, string arName, string enName, Nullable<decimal> mainContractAmount, Nullable<bool> isActiveProject)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var projectNumberParameter = projectNumber != null ?
                new ObjectParameter("ProjectNumber", projectNumber) :
                new ObjectParameter("ProjectNumber", typeof(string));
    
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            var mainContractAmountParameter = mainContractAmount.HasValue ?
                new ObjectParameter("MainContractAmount", mainContractAmount) :
                new ObjectParameter("MainContractAmount", typeof(decimal));
    
            var isActiveProjectParameter = isActiveProject.HasValue ?
                new ObjectParameter("IsActiveProject", isActiveProject) :
                new ObjectParameter("IsActiveProject", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectTBL>("SelectParamProjectTBL", projectIDParameter, projectNumberParameter, arNameParameter, enNameParameter, mainContractAmountParameter, isActiveProjectParameter);
        }
    
        public virtual ObjectResult<ProjectTBL> SelectParamProjectTBL(Nullable<int> projectID, string projectNumber, string arName, string enName, Nullable<decimal> mainContractAmount, Nullable<bool> isActiveProject, MergeOption mergeOption)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var projectNumberParameter = projectNumber != null ?
                new ObjectParameter("ProjectNumber", projectNumber) :
                new ObjectParameter("ProjectNumber", typeof(string));
    
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            var mainContractAmountParameter = mainContractAmount.HasValue ?
                new ObjectParameter("MainContractAmount", mainContractAmount) :
                new ObjectParameter("MainContractAmount", typeof(decimal));
    
            var isActiveProjectParameter = isActiveProject.HasValue ?
                new ObjectParameter("IsActiveProject", isActiveProject) :
                new ObjectParameter("IsActiveProject", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectTBL>("SelectParamProjectTBL", mergeOption, projectIDParameter, projectNumberParameter, arNameParameter, enNameParameter, mainContractAmountParameter, isActiveProjectParameter);
        }
    
        public virtual ObjectResult<StageProject> SelectParamStageProject(Nullable<int> stageID, Nullable<int> projectID, string stageArName, string stageEnName, Nullable<decimal> stageBudget)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var stageArNameParameter = stageArName != null ?
                new ObjectParameter("StageArName", stageArName) :
                new ObjectParameter("StageArName", typeof(string));
    
            var stageEnNameParameter = stageEnName != null ?
                new ObjectParameter("StageEnName", stageEnName) :
                new ObjectParameter("StageEnName", typeof(string));
    
            var stageBudgetParameter = stageBudget.HasValue ?
                new ObjectParameter("StageBudget", stageBudget) :
                new ObjectParameter("StageBudget", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StageProject>("SelectParamStageProject", stageIDParameter, projectIDParameter, stageArNameParameter, stageEnNameParameter, stageBudgetParameter);
        }
    
        public virtual ObjectResult<StageProject> SelectParamStageProject(Nullable<int> stageID, Nullable<int> projectID, string stageArName, string stageEnName, Nullable<decimal> stageBudget, MergeOption mergeOption)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var stageArNameParameter = stageArName != null ?
                new ObjectParameter("StageArName", stageArName) :
                new ObjectParameter("StageArName", typeof(string));
    
            var stageEnNameParameter = stageEnName != null ?
                new ObjectParameter("StageEnName", stageEnName) :
                new ObjectParameter("StageEnName", typeof(string));
    
            var stageBudgetParameter = stageBudget.HasValue ?
                new ObjectParameter("StageBudget", stageBudget) :
                new ObjectParameter("StageBudget", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StageProject>("SelectParamStageProject", mergeOption, stageIDParameter, projectIDParameter, stageArNameParameter, stageEnNameParameter, stageBudgetParameter);
        }
    
        public virtual ObjectResult<OrganizationBasic> SelectlikeOrganizationBasic(string orgArName, string orgEnName)
        {
            var orgArNameParameter = orgArName != null ?
                new ObjectParameter("OrgArName", orgArName) :
                new ObjectParameter("OrgArName", typeof(string));
    
            var orgEnNameParameter = orgEnName != null ?
                new ObjectParameter("OrgEnName", orgEnName) :
                new ObjectParameter("OrgEnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrganizationBasic>("SelectlikeOrganizationBasic", orgArNameParameter, orgEnNameParameter);
        }
    
        public virtual ObjectResult<OrganizationBasic> SelectlikeOrganizationBasic(string orgArName, string orgEnName, MergeOption mergeOption)
        {
            var orgArNameParameter = orgArName != null ?
                new ObjectParameter("OrgArName", orgArName) :
                new ObjectParameter("OrgArName", typeof(string));
    
            var orgEnNameParameter = orgEnName != null ?
                new ObjectParameter("OrgEnName", orgEnName) :
                new ObjectParameter("OrgEnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrganizationBasic>("SelectlikeOrganizationBasic", mergeOption, orgArNameParameter, orgEnNameParameter);
        }
    
        public virtual ObjectResult<PositionInProject> SelectAllPositionInProject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PositionInProject>("SelectAllPositionInProject");
        }
    
        public virtual ObjectResult<PositionInProject> SelectAllPositionInProject(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PositionInProject>("SelectAllPositionInProject", mergeOption);
        }
    
        public virtual ObjectResult<PositionInProject> SelectParamPositionInProject(Nullable<int> iD, string arName, string enName)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PositionInProject>("SelectParamPositionInProject", iDParameter, arNameParameter, enNameParameter);
        }
    
        public virtual ObjectResult<PositionInProject> SelectParamPositionInProject(Nullable<int> iD, string arName, string enName, MergeOption mergeOption)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PositionInProject>("SelectParamPositionInProject", mergeOption, iDParameter, arNameParameter, enNameParameter);
        }
    }
}
