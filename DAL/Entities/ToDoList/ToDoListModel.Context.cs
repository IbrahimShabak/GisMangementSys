//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.Entities.ToDoList
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TODoListGISEntities : DbContext
    {
        public TODoListGISEntities()
            : base("name=TODoListGISEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActionTBL> ActionTBLs { get; set; }
        public virtual DbSet<ActionType> ActionTypes { get; set; }
        public virtual DbSet<EmployeeTask> EmployeeTasks { get; set; }
        public virtual DbSet<ProiertyType> ProiertyTypes { get; set; }
        public virtual DbSet<RoleInTask> RoleInTasks { get; set; }
        public virtual DbSet<TaskOperation> TaskOperations { get; set; }
        public virtual DbSet<TaskType> TaskTypes { get; set; }
    
        public virtual ObjectResult<ActionTBL> GetActionTBLByParam(Nullable<int> employeeActionID, Nullable<int> actionTaken)
        {
            var employeeActionIDParameter = employeeActionID.HasValue ?
                new ObjectParameter("EmployeeActionID", employeeActionID) :
                new ObjectParameter("EmployeeActionID", typeof(int));
    
            var actionTakenParameter = actionTaken.HasValue ?
                new ObjectParameter("ActionTaken", actionTaken) :
                new ObjectParameter("ActionTaken", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActionTBL>("GetActionTBLByParam", employeeActionIDParameter, actionTakenParameter);
        }
    
        public virtual ObjectResult<ActionTBL> GetActionTBLByParam(Nullable<int> employeeActionID, Nullable<int> actionTaken, MergeOption mergeOption)
        {
            var employeeActionIDParameter = employeeActionID.HasValue ?
                new ObjectParameter("EmployeeActionID", employeeActionID) :
                new ObjectParameter("EmployeeActionID", typeof(int));
    
            var actionTakenParameter = actionTaken.HasValue ?
                new ObjectParameter("ActionTaken", actionTaken) :
                new ObjectParameter("ActionTaken", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActionTBL>("GetActionTBLByParam", mergeOption, employeeActionIDParameter, actionTakenParameter);
        }
    
        public virtual ObjectResult<ActionType> GetActionTypeByParam(string arName, string enName)
        {
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActionType>("GetActionTypeByParam", arNameParameter, enNameParameter);
        }
    
        public virtual ObjectResult<ActionType> GetActionTypeByParam(string arName, string enName, MergeOption mergeOption)
        {
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActionType>("GetActionTypeByParam", mergeOption, arNameParameter, enNameParameter);
        }
    
        public virtual ObjectResult<ActionTBL> GetAllActionTBL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActionTBL>("GetAllActionTBL");
        }
    
        public virtual ObjectResult<ActionTBL> GetAllActionTBL(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActionTBL>("GetAllActionTBL", mergeOption);
        }
    
        public virtual ObjectResult<ActionType> GetAllActionType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActionType>("GetAllActionType");
        }
    
        public virtual ObjectResult<ActionType> GetAllActionType(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActionType>("GetAllActionType", mergeOption);
        }
    
        public virtual ObjectResult<EmployeeTask> GetAllEmployeeTask()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeTask>("GetAllEmployeeTask");
        }
    
        public virtual ObjectResult<EmployeeTask> GetAllEmployeeTask(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeTask>("GetAllEmployeeTask", mergeOption);
        }
    
        public virtual ObjectResult<ProiertyType> GetAllProiertyType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProiertyType>("GetAllProiertyType");
        }
    
        public virtual ObjectResult<ProiertyType> GetAllProiertyType(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProiertyType>("GetAllProiertyType", mergeOption);
        }
    
        public virtual ObjectResult<RoleInTask> GetAllRoleInTask()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RoleInTask>("GetAllRoleInTask");
        }
    
        public virtual ObjectResult<RoleInTask> GetAllRoleInTask(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RoleInTask>("GetAllRoleInTask", mergeOption);
        }
    
        public virtual ObjectResult<TaskOperation> GetAllTaskOperations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskOperation>("GetAllTaskOperations");
        }
    
        public virtual ObjectResult<TaskOperation> GetAllTaskOperations(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskOperation>("GetAllTaskOperations", mergeOption);
        }
    
        public virtual ObjectResult<TaskType> GetAllTaskType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskType>("GetAllTaskType");
        }
    
        public virtual ObjectResult<TaskType> GetAllTaskType(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskType>("GetAllTaskType", mergeOption);
        }
    
        public virtual ObjectResult<EmployeeTask> GetEmployeeTaskByParam(Nullable<int> taskID, Nullable<int> empID, Nullable<int> roleInTask)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var roleInTaskParameter = roleInTask.HasValue ?
                new ObjectParameter("RoleInTask", roleInTask) :
                new ObjectParameter("RoleInTask", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeTask>("GetEmployeeTaskByParam", taskIDParameter, empIDParameter, roleInTaskParameter);
        }
    
        public virtual ObjectResult<EmployeeTask> GetEmployeeTaskByParam(Nullable<int> taskID, Nullable<int> empID, Nullable<int> roleInTask, MergeOption mergeOption)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var roleInTaskParameter = roleInTask.HasValue ?
                new ObjectParameter("RoleInTask", roleInTask) :
                new ObjectParameter("RoleInTask", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeTask>("GetEmployeeTaskByParam", mergeOption, taskIDParameter, empIDParameter, roleInTaskParameter);
        }
    
        public virtual ObjectResult<TaskOperation> GetLikeTaskOperations(string taskName)
        {
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskOperation>("GetLikeTaskOperations", taskNameParameter);
        }
    
        public virtual ObjectResult<TaskOperation> GetLikeTaskOperations(string taskName, MergeOption mergeOption)
        {
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskOperation>("GetLikeTaskOperations", mergeOption, taskNameParameter);
        }
    
        public virtual ObjectResult<ProiertyType> GetProiertyTypeByParam(string arName, string enName)
        {
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProiertyType>("GetProiertyTypeByParam", arNameParameter, enNameParameter);
        }
    
        public virtual ObjectResult<ProiertyType> GetProiertyTypeByParam(string arName, string enName, MergeOption mergeOption)
        {
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProiertyType>("GetProiertyTypeByParam", mergeOption, arNameParameter, enNameParameter);
        }
    
        public virtual ObjectResult<RoleInTask> GetRoleInTaskByParam(string arName, string enName)
        {
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RoleInTask>("GetRoleInTaskByParam", arNameParameter, enNameParameter);
        }
    
        public virtual ObjectResult<RoleInTask> GetRoleInTaskByParam(string arName, string enName, MergeOption mergeOption)
        {
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RoleInTask>("GetRoleInTaskByParam", mergeOption, arNameParameter, enNameParameter);
        }
    
        public virtual ObjectResult<TaskOperation> GetTaskOperationsByParam(Nullable<int> taskID, string taskName, Nullable<int> creatorEmp, Nullable<int> parentID, Nullable<int> deliverableID, Nullable<bool> taskStatus, Nullable<int> taskType, Nullable<int> taskProierty)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var creatorEmpParameter = creatorEmp.HasValue ?
                new ObjectParameter("CreatorEmp", creatorEmp) :
                new ObjectParameter("CreatorEmp", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var deliverableIDParameter = deliverableID.HasValue ?
                new ObjectParameter("DeliverableID", deliverableID) :
                new ObjectParameter("DeliverableID", typeof(int));
    
            var taskStatusParameter = taskStatus.HasValue ?
                new ObjectParameter("TaskStatus", taskStatus) :
                new ObjectParameter("TaskStatus", typeof(bool));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            var taskProiertyParameter = taskProierty.HasValue ?
                new ObjectParameter("TaskProierty", taskProierty) :
                new ObjectParameter("TaskProierty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskOperation>("GetTaskOperationsByParam", taskIDParameter, taskNameParameter, creatorEmpParameter, parentIDParameter, deliverableIDParameter, taskStatusParameter, taskTypeParameter, taskProiertyParameter);
        }
    
        public virtual ObjectResult<TaskOperation> GetTaskOperationsByParam(Nullable<int> taskID, string taskName, Nullable<int> creatorEmp, Nullable<int> parentID, Nullable<int> deliverableID, Nullable<bool> taskStatus, Nullable<int> taskType, Nullable<int> taskProierty, MergeOption mergeOption)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var creatorEmpParameter = creatorEmp.HasValue ?
                new ObjectParameter("CreatorEmp", creatorEmp) :
                new ObjectParameter("CreatorEmp", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var deliverableIDParameter = deliverableID.HasValue ?
                new ObjectParameter("DeliverableID", deliverableID) :
                new ObjectParameter("DeliverableID", typeof(int));
    
            var taskStatusParameter = taskStatus.HasValue ?
                new ObjectParameter("TaskStatus", taskStatus) :
                new ObjectParameter("TaskStatus", typeof(bool));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            var taskProiertyParameter = taskProierty.HasValue ?
                new ObjectParameter("TaskProierty", taskProierty) :
                new ObjectParameter("TaskProierty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskOperation>("GetTaskOperationsByParam", mergeOption, taskIDParameter, taskNameParameter, creatorEmpParameter, parentIDParameter, deliverableIDParameter, taskStatusParameter, taskTypeParameter, taskProiertyParameter);
        }
    
        public virtual ObjectResult<TaskType> GetTaskTypeByParam(string arName, string enName)
        {
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskType>("GetTaskTypeByParam", arNameParameter, enNameParameter);
        }
    
        public virtual ObjectResult<TaskType> GetTaskTypeByParam(string arName, string enName, MergeOption mergeOption)
        {
            var arNameParameter = arName != null ?
                new ObjectParameter("ArName", arName) :
                new ObjectParameter("ArName", typeof(string));
    
            var enNameParameter = enName != null ?
                new ObjectParameter("EnName", enName) :
                new ObjectParameter("EnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskType>("GetTaskTypeByParam", mergeOption, arNameParameter, enNameParameter);
        }
    }
}
