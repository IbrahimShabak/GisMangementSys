//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.Entities.Archive
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ArchiveDBEntities : DbContext
    {
        public ArchiveDBEntities()
            : base("name=ArchiveDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ArchiveTBL> ArchiveTBLs { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<EventType> EventTypes { get; set; }
        public virtual DbSet<FollowUpDocumentsCircle> FollowUpDocumentsCircles { get; set; }
    
        public virtual ObjectResult<ArchiveTBL> GetAllArchiveTBL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArchiveTBL>("GetAllArchiveTBL");
        }
    
        public virtual ObjectResult<ArchiveTBL> GetAllArchiveTBL(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArchiveTBL>("GetAllArchiveTBL", mergeOption);
        }
    
        public virtual ObjectResult<DocumentType> GetAllDocumentType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocumentType>("GetAllDocumentType");
        }
    
        public virtual ObjectResult<DocumentType> GetAllDocumentType(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocumentType>("GetAllDocumentType", mergeOption);
        }
    
        public virtual ObjectResult<EventType> GetAllEventType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EventType>("GetAllEventType");
        }
    
        public virtual ObjectResult<EventType> GetAllEventType(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EventType>("GetAllEventType", mergeOption);
        }
    
        public virtual ObjectResult<FollowUpDocumentsCircle> GetAllFollowUpDocumentsCircle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FollowUpDocumentsCircle>("GetAllFollowUpDocumentsCircle");
        }
    
        public virtual ObjectResult<FollowUpDocumentsCircle> GetAllFollowUpDocumentsCircle(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FollowUpDocumentsCircle>("GetAllFollowUpDocumentsCircle", mergeOption);
        }
    
        public virtual ObjectResult<ArchiveTBL> GetArchiveTBLByParam(string details, Nullable<int> projectID, Nullable<int> documentType, Nullable<bool> withHardCopy)
        {
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var documentTypeParameter = documentType.HasValue ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(int));
    
            var withHardCopyParameter = withHardCopy.HasValue ?
                new ObjectParameter("WithHardCopy", withHardCopy) :
                new ObjectParameter("WithHardCopy", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArchiveTBL>("GetArchiveTBLByParam", detailsParameter, projectIDParameter, documentTypeParameter, withHardCopyParameter);
        }
    
        public virtual ObjectResult<ArchiveTBL> GetArchiveTBLByParam(string details, Nullable<int> projectID, Nullable<int> documentType, Nullable<bool> withHardCopy, MergeOption mergeOption)
        {
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var documentTypeParameter = documentType.HasValue ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(int));
    
            var withHardCopyParameter = withHardCopy.HasValue ?
                new ObjectParameter("WithHardCopy", withHardCopy) :
                new ObjectParameter("WithHardCopy", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArchiveTBL>("GetArchiveTBLByParam", mergeOption, detailsParameter, projectIDParameter, documentTypeParameter, withHardCopyParameter);
        }
    
        public virtual ObjectResult<FollowUpDocumentsCircle> GetFollowUpDocumentsCircleByParam(Nullable<int> archiveID, Nullable<int> empID, Nullable<int> eventType)
        {
            var archiveIDParameter = archiveID.HasValue ?
                new ObjectParameter("ArchiveID", archiveID) :
                new ObjectParameter("ArchiveID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var eventTypeParameter = eventType.HasValue ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FollowUpDocumentsCircle>("GetFollowUpDocumentsCircleByParam", archiveIDParameter, empIDParameter, eventTypeParameter);
        }
    
        public virtual ObjectResult<FollowUpDocumentsCircle> GetFollowUpDocumentsCircleByParam(Nullable<int> archiveID, Nullable<int> empID, Nullable<int> eventType, MergeOption mergeOption)
        {
            var archiveIDParameter = archiveID.HasValue ?
                new ObjectParameter("ArchiveID", archiveID) :
                new ObjectParameter("ArchiveID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var eventTypeParameter = eventType.HasValue ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FollowUpDocumentsCircle>("GetFollowUpDocumentsCircleByParam", mergeOption, archiveIDParameter, empIDParameter, eventTypeParameter);
        }
    
        public virtual ObjectResult<ArchiveTBL> GetLikeArchiveTBL(string details, Nullable<int> projectID)
        {
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArchiveTBL>("GetLikeArchiveTBL", detailsParameter, projectIDParameter);
        }
    
        public virtual ObjectResult<ArchiveTBL> GetLikeArchiveTBL(string details, Nullable<int> projectID, MergeOption mergeOption)
        {
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArchiveTBL>("GetLikeArchiveTBL", mergeOption, detailsParameter, projectIDParameter);
        }
    }
}
